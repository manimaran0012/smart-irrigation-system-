#include <Firebase.h>  // Include Firebase library
#include "DHT.h"
#include <Wire.h>
#include <Adafruit_BMP085.h>
#include <WiFi.h>  // Include the WiFi library for ESP32

// Firebase database URL
#define FIREBASE_URL "https://smartirrigationsystem-6bfc0-default-rtdb.asia-southeast1.firebasedatabase.app/"
Firebase fb(FIREBASE_URL);

// Define the relay, DHT11, Soil Moisture sensor, Rain sensor, and LED pins
#define RELAY_PIN 23
#define DHTPIN 4
#define SOIL_MOISTURE_PIN 34   // Analog pin for soil moisture sensor
#define RAIN_SENSOR_PIN 32     // Digital pin for rain sensor
#define LED_PIN 13             // LED pin to indicate motor ON state
#define DHTTYPE DHT11

// Create DHT and BMP180 objects
DHT dht(DHTPIN, DHTTYPE);
Adafruit_BMP085 bmp;

// Set thresholds for temperature and soil moisture
float temperatureThreshold = 35.0;   // Relay turns on if temperature exceeds this
int moistureThreshold = 20;          // Relay turns on if soil moisture drops below this value

// Soil moisture sensor calibration values
int dryValue = 4095;  // Value when soil is completely dry
int wetValue = 0;     // Value when soil is completely wet

// Wi-Fi credentials
const char* ssid = "Galaxy F6292c9";        // Replace with your WiFi SSID
const char* password = "dxwm3987";          // Replace with your WiFi password

void setup() {
  // Initialize the serial monitor
  Serial.begin(115200);

  // Connect to Wi-Fi
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting...");
  }

  Serial.println("Connected to Wi-Fi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Initialize relay pin and LED pin as OUTPUT
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);

  // Start with the relay and LED off (HIGH for low-level trigger relay)
  digitalWrite(RELAY_PIN, HIGH);
  digitalWrite(LED_PIN, LOW);
  Serial.println("Relay OFF");

  // Initialize the DHT sensor
  dht.begin();

  // Initialize BMP180 sensor
  if (!bmp.begin()) {
    Serial.println("Could not find a valid BMP180 sensor!");
    while (1) {}
  }

  // Initialize rain sensor pin
  pinMode(RAIN_SENSOR_PIN, INPUT);

  delay(1000);
}

void loop() {
  // Read temperature and humidity from DHT11 sensor
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  
  // Read soil moisture level
  int soilMoistureRaw = analogRead(SOIL_MOISTURE_PIN);
  
  // Map the raw soil moisture value to a percentage (0% = completely dry, 100% = completely wet)
  int soilMoisturePercent = map(soilMoistureRaw, dryValue, wetValue, 0, 100);
  soilMoisturePercent = constrain(soilMoisturePercent, 0, 100);  // Ensure value is within bounds
  
  // Read rain sensor status
  int rainDetected = digitalRead(RAIN_SENSOR_PIN); // 0 means rain, 1 means no rain
  
  // Read pressure and altitude from BMP180
  float pressure = bmp.readPressure();
  float altitude = bmp.readAltitude();

  // Check if DHT readings are valid
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Motor status
  bool motorOn = false;

  // **NEW**: Read manual control from Firebase
  bool manualControl = fb.getBool("Environment/ManualControl");
  bool manualControlState = fb.getBool("Environment/ManualControlState"); // true = motor ON, false = motor OFF
  
  // Print temperature, humidity, soil moisture, rain, pressure, and altitude to the serial monitor
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println("Â°C");
  
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println("%");
  
  Serial.print("Soil Moisture: ");
  Serial.print(soilMoisturePercent);
  Serial.println("%");
  
  Serial.print("Rain detected: ");
  Serial.println(rainDetected == 0 ? "YES" : "NO");
  
  Serial.print("Pressure: ");
  Serial.print(pressure);
  Serial.println(" Pa");
  
  Serial.print("Altitude: ");
  Serial.print(altitude);
  Serial.println(" m");

  // **New** Manual or Automatic motor control logic
  if (manualControl) {
    // Manual control is enabled
    if (manualControlState) {
      digitalWrite(RELAY_PIN, LOW);  // Turn on relay (motor ON)
      digitalWrite(LED_PIN, HIGH);   // Turn on LED
      Serial.println("Manual Control: Relay ON (Motor ON)");
      motorOn = true;
    } else {
      digitalWrite(RELAY_PIN, HIGH);  // Turn off relay (motor OFF)
      digitalWrite(LED_PIN, LOW);     // Turn off LED
      Serial.println("Manual Control: Relay OFF (Motor OFF)");
      motorOn = false;
    }
  } else {
    // Automatic control based on temperature and soil moisture
    if (temperature > temperatureThreshold || soilMoisturePercent < moistureThreshold) {
      digitalWrite(RELAY_PIN, LOW);  // Turn on relay (motor ON)
      digitalWrite(LED_PIN, HIGH);   // Turn on LED
      Serial.println("Automatic Control: Relay ON (Motor ON)");
      motorOn = true;
    } else {
      digitalWrite(RELAY_PIN, HIGH);  // Turn off relay (motor OFF)
      digitalWrite(LED_PIN, LOW);     // Turn off LED
      Serial.println("Automatic Control: Relay OFF (Motor OFF)");
      motorOn = false;
    }
  }

  // Send data to Firebase
  fb.setFloat("Environment/Temperature", temperature);
  fb.setFloat("Environment/Humidity", humidity);
  fb.setInt("Environment/SoilMoisturePercent", soilMoisturePercent);
  fb.setBool("Environment/RainDetected", rainDetected == 0);
  fb.setFloat("Environment/Pressure", pressure);
  fb.setFloat("Environment/Altitude", altitude);
  fb.setBool("Environment/MotorStatus", motorOn);  // Add motor status to Firebase

  // Wait 2 seconds before the next reading
  delay(2000);
}
